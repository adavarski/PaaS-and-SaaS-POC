#---------------------------------------------------------------
# Info
# autor: davar
# email: 
# version: 0.1.0
# Descrption: SaaS DEV : EC2 & Route53 & ELB) @ AWS
#---------------------------------------------------------------
#
#
# terraform --help   
# terraform providers 
# terraform init     
# terraform validate
# terraform plan   
# terraform apply 
# terraform show 
# terraform destroy  
#---------------------------------------------------------------


#--------------------------------------------------------------
#                       INSTANCES EC2 
#--------------------------------------------------------------
#                  INSTQNCE 1 - BALANCER
#--------------------------------------------------------------
# HAproxy
#--------------------------------------------------------------
resource "aws_instance" "lb_ec2" {
    instance_type          = var.typeInstance
    ami                    = var.ami
    key_name               = var.key_name

    # Security group 
    vpc_security_group_ids = [aws_security_group.srv_lb_sg.id]
    subnet_id              = aws_subnet.Pub_subnet1.id
    
    # Tags instance
    tags = {
        Name = "SRV_LB"
    }   
}

#--------------------------------------------------------------
#                  INSTNCES - MC SERVICES
#--------------------------------------------------------------
# Servises:
# InfraAPI
# Orchestrator
# Postgres cluster
# etc.
#--------------------------------------------------------------

resource "aws_instance" "svc_postgres_master_ec2" {
    instance_type          = var.typeInstance
    ami                    = var.ami
    key_name               = var.key_name

    # Security group 
    vpc_security_group_ids = [aws_security_group.srv_svc_sg.id]
    subnet_id              = aws_subnet.Priv_subnet1.id
    
    # Tags
    tags = {
        Name = "SRV_SVC_Postgres_master"
    }   
}

resource "aws_instance" "svc_postgres_slave_ec2" {
    instance_type          = var.typeInstance
    ami                    = var.ami
    key_name               = var.key_name

    # Security group    
    vpc_security_group_ids = [aws_security_group.srv_svc_sg.id]
    subnet_id              = aws_subnet.Priv_subnet1.id
   
    # Tags 
    tags = {
        Name = "SRV_SVC_Postgres_slave"
    }
}


#--------------------------------------------------------------
#                  INSTANCES - MONITORING/LOGs
#--------------------------------------------------------------
# Monitoring/Debbuging&Logs servcies:
# TIG, SENSU, ZABBIX
# ELK/EFK
#--------------------------------------------------------------

resource "aws_instance" "mt_influxdb_grafana_ec2" {
    instance_type          = var.typeInstance
    ami                    = var.ami
    key_name               = var.key_name

    # Grupo de seguranÃ§a 
    vpc_security_group_ids = [aws_security_group.srv_mt_sg.id]
    subnet_id              = aws_subnet.Priv_subnet2.id
    
    # Tags 
    tags = {
        Name = "SRV_MT_InfluxDB_Grafana"
    }   
}

#--------------------------------------------------------------
#                  ROUTE53 - LBs, MC Servcies, MONITORING/LOGs
#--------------------------------------------------------------
# LBs:
# MC SERVICES:
# MONITORING/LOGS: 
#--------------------------------------------------------------

variable "parent_zone" {}


locals {
  fully_qualified_parent_zone = "${var.parent_zone}."
}

data "aws_route53_zone" "parent" {
  name = local.fully_qualified_parent_zone
}

resource "aws_route53_record" "route53_lb_ec2" {
  zone_id = data.aws_route53_zone.parent.id
  name    = "lb_ec2"
  type    = "A"
  ttl     = "300"
  records = [aws_instance.lb_ec2.public_ip]
}

resource "aws_route53_record" "route53_svc_postgres_master_ec2" {
  zone_id = data.aws_route53_zone.parent.id
  name    = "svc_postgres_master_ec2"
  type    = "A"
  ttl     = "300"
  records = [aws_instance.svc_postgres_master_ec2.public_ip]
}

resource "aws_route53_record" "route53_svc_postgres_slave_ec2" {
  zone_id = data.aws_route53_zone.parent.id
  name    = "svc_postgres_slave_ec2"
  type    = "A"
  ttl     = "300"
  records = [aws_instance.svc_postgres_slave_ec2.public_ip]
}

resource "aws_route53_record" "route53_mt_influxdb_grafana_ec2" {
  zone_id = data.aws_route53_zone.parent.id
  name    = "mt_influxdb_grafana_ec2"
  type    = "A"
  ttl     = "300"
  records = [aws_instance.mt_influxdb_grafana_ec2.public_ip]
}

#--------------------------------------------------------------
#                  AWS ELBs - > EC2, Route53 
#--------------------------------------------------------------
# LBs:
# orchestrator.web; orchestrator.api, grafana, kibana 
# 
#--------------------------------------------------------------

resource "aws_elb" "grafana-elb" {
  name               = "grafana-elb"
  security_groups    = ["${aws_security_group.srv_lb_sg.id}"]
  subnets = ["${aws_subnet.Pub_subnet1.id}"]
  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    interval            = 30
    target              = "HTTP:3000/"
  }

  listener {
    lb_port           = 3000
    lb_protocol       = "http"
    instance_port     = "3000"
    instance_protocol = "http"
  }
}

# Create a new load balancer attachment
resource "aws_elb_attachment" "grafana-elb" {
  elb      = "aws_elb.grafana-elb.id"
  instance = "aws_instance.mt_influxdb_grafana_ec2.id"
}

resource "aws_route53_record" "grafana" {
  zone_id = data.aws_route53_zone.parent.id
  name    = "grafana-elb"
  type    = "A"

  alias {
    name                   = aws_elb.grafana-elb.dns_name
    zone_id                = aws_elb.grafana-elb.zone_id
    evaluate_target_health = true
  }
}

